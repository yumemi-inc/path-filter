name: 'Path Filter'
description: 'A GitHub Action to filter changed files in pull requests and commits.'
author: 'YUMEMI Inc.'
branding:
  icon: 'filter'
  color: 'blue'
inputs:
  patterns:
    description: 'Path pattern to filter. See README for details.'
    required: false
  run:
    description: 'Bash script to run if at least one file exists after filtering.'
    required: false
  head-ref:
    description: 'Current branch, tag, or commit SHA to compare with base.'
    required: false
    default: ${{ github.sha }}
  base-ref:
    description: 'Branch, tag, or commit SHA as a basis for comparison.'
    required: false
    default: |-
      ${{
        (github.event_name == 'pull_request' && github.base_ref) ||
        (github.event_name == 'push' && (startsWith(github.event.before, '0000') && github.event.repository.default_branch || github.event.before)) ||
        (github.event_name == 'merge_group' && github.event.merge_group.base_sha) ||
        github.event.repository.default_branch
      }}
  use-merge-base:
    description: 'Whether to compare with the latest common commit.'
    required: false
    default: 'false'
outputs:
  exists:
    description: 'Whether at least one file exists after filtering.'
    value: ${{ steps.filter.outputs.result }}
  action-path:
    description: 'Used to access artifact files.'
    value: ${{ steps.prepare.outputs.action-path }}
runs:
  using: 'composite'
  steps:
    - name: Prepare
      id: prepare
      shell: bash
      env:
        PATTERNS: ${{ inputs.patterns }}
        HEAD_REF: ${{ inputs.head-ref }}
        BASE_REF: ${{ inputs.base-ref }}
        USE_MERGE_BASE: ${{ inputs.use-merge-base }}
        GH_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "::debug::git version: $(git --version)"
        echo "::debug::gh version: $(gh --version | tr '\n' ' ')"
        echo "::debug::jq version: $(jq --version)"
        echo "action-path=$GITHUB_ACTION_PATH" >> "$GITHUB_OUTPUT"
        source "$GITHUB_ACTION_PATH/raise_error.sh"

        patterns="$("$GITHUB_ACTION_PATH/get_multiline_input.sh" "$PATTERNS")"

        if [ "$patterns" == '[]' ]; then raise_error "Specify 'patterns' input."; fi

        echo "patterns=$patterns" >> "$GITHUB_OUTPUT"

        if [[ -z "$HEAD_REF" || -z "$BASE_REF" ]]; then raise_error "Specify 'head-ref' and 'base-ref' inputs."; fi

        # ref: https://github.com/actions/checkout/blob/72f2cec99f417b1a1c5e2e88945068983b7965f9/src/git-auth-helper.ts#L55-L63
        git config --global 'http.https://github.com/.extraheader' "AUTHORIZATION: basic $(echo -n "x-access-token:$GH_TOKEN"|base64)"

        # reuse sources for the same job
        if [ ! -d "$GITHUB_ACTION_PATH/sources" ]; then
          git clone -q --depth 1 --no-checkout "https://github.com/$GH_REPO" "$GITHUB_ACTION_PATH/sources" > /dev/null 2>&1 || raise_error "May not have 'contents: read' permission."
        fi
        cd "$GITHUB_ACTION_PATH/sources"

        git fetch -q --depth 1 origin "$HEAD_REF" > /dev/null 2>&1 || raise_error "'head-ref' input is not valid."
        head_sha="$(git rev-parse FETCH_HEAD)"

        git fetch -q --depth 1 origin "$BASE_REF" > /dev/null 2>&1 || raise_error "'base-ref' input is not valid."
        base_sha="$(git rev-parse FETCH_HEAD)"

        if [ "$USE_MERGE_BASE" == 'true' ]; then
          merge_base_sha="$(gh api "repos/{owner}/{repo}/compare/${base_sha}...${head_sha}" | jq -r '.merge_base_commit.sha')"
          git fetch -q --depth 1 origin "$merge_base_sha"
          base_sha="$(git rev-parse FETCH_HEAD)"
        fi

        # output large data to filles
        echo -n "$(git diff --name-only "$base_sha" "$head_sha" | jq -R | jq -cs)" > "$GITHUB_ACTION_PATH/files.json"
    - name: Filter files
      id: filter
      uses: actions/github-script@v7
      env:
        PATTERNS: ${{ steps.prepare.outputs.patterns }}
      with:
        script: |
          const { GITHUB_ACTION_PATH, PATTERNS } = process.env;
          const fs = require('fs'), minimatch = require(`${GITHUB_ACTION_PATH}/dist/index.js`);
          const files = JSON.parse(fs.readFileSync(`${GITHUB_ACTION_PATH}/files.json`, 'utf-8')), patterns = JSON.parse(PATTERNS);
          const incPatterns = patterns.filter(p => !p.startsWith('!'));
          const excPatterns = patterns.filter(p => p.startsWith('!')).map(p => p.slice(1));
          const option = { dot: true, nocomment: true, nonegate: true, noext: true };
          const filteredFiles = files.filter(f => incPatterns.length === 0 || incPatterns.some(p => minimatch(f, p, option)))
            .filter(f => !excPatterns.some(p => minimatch(f, p, option)));
          fs.writeFileSync(`${GITHUB_ACTION_PATH}/filtered_files.json`, JSON.stringify(filteredFiles), 'utf-8');
          return filteredFiles.length !== 0;          
    - name: Run script
      if: steps.filter.outputs.result == 'true' && inputs.run != null
      shell: bash
      run: |
        ${{ inputs.run }}
